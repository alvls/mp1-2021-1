/*	Разработать систему классов и реализовать с ее помощью игру Змейка.
	Требования (правила).

	Играет один игрок (человек), управляющий «змейкой».

	Игра идет на прямоугольном поле N x M клеток. 
	Поле ограничено «стенами» так что вместе со стенами размер поля – (N + 2) x (M + 2) клеток.

	При старте игры змейка имеет длину 5 клеток, форму в виде горизонтального отрезка и располагается
	в произвольном месте поля, не пересекая и не касаясь стен.

	При старте игры «голова» змейки располагается слева, «хвост» справа. Голова змейки окрашена в цвет,
	отличный от цвета остальных клеток ее тела.

	При старте игры в произвольной клетке поля (не совпадающей с клетками, занятыми змейкой) возникает «пища».

	При запуске игрового процесса (по специальной команде или автоматически при старте игры) змейка начинает
	автоматическое движение влево с некоторой заданной скоростью.

	Движение заключается в том, что за каждый такт голова змейки перемещается на одну клетку в текущем направлении
	движения, а клетка, в которой располагался хвост, становится пустой.

	Игрок может сменить направление движения змейки с помощью клавиш-«стрелок» (вверх, вниз, влево, вправо).

	Если на текущем такте движения голова змейки должна будет занять клетку стены или клетку, которая уже занята
	любой из клеток ее тела, игра прекращается и считается проигранной.

	Задача игрока вырастить змейку до заданного при старте игрового процесса размера. Змейка вырастает в длину
	на одну клетку (с хвоста) при каждом поглощении пищи, т.е. в тот момент, когда ее голова на очередном такте
	движения занимает клетку, в которой расположена пища. 

	На этом же такте в произвольном месте игрового поля (не совпадающей с клетками, занятыми змейкой) снова
	появляется пища.

	Если змейка выросла до заданной при старте игрового процесса длины, игра считается выигранной.	*/

#include "main.hpp"
#include "GameSnake.hpp"

void gotoxy(const COORD pos)
{
	static HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleCursorPosition(hConsole, pos);
}

void main()
{
	setlocale(LC_ALL, "Ru");
	system("color F0");
	short exit = 2;
	while (exit != 1)
	{
		try
		{
			short food, width, height;
			cout << "\n Введите параметры новой игры:\n Длина змейки, которую нужно достичь: ";
			cin >> food;
			cout << "\n Ширина поля: ";
			cin >> width;
			cout << "\n Высота поля: ";
			cin >> height;
			GameSnake game(food, width, height);
			game.LaunchGame();
			cout << "\n Выйти из программы?\n (1) Да (2) Нет\n ";
			cin >> exit;
			system("cls");
		}
		catch (const exception& ex)
		{
			cout << "\n " << ex.what() << "\n Попробуйте ввести другие данные!\n ";
			system("pause");
			system("cls");
		}
	}
}
