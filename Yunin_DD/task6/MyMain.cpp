//Разработать систему классов и реализовать с ее помощью игру Змейка.
	//Требования(правила).
//Играет один игрок(человек), управляющий «змейкой».
//Игра идет на прямоугольном поле N x M клеток.Поле ограничено «стенами» так что вместе со стенами размер поля – (N + 2) x (M + 2) клеток.
//При старте игры змейка имеет длину 5 клеток, форму в виде горизонтального отрезка и располагается в произвольном месте поля, 
//не пересекая и не касаясь стен.
//При старте игры «голова» змейки располагается слева, «хвост» справа.Голова змейки окрашена в цвет, отличный от цвета остальных клеток ее тела.
//При старте игры в произвольной клетке поля(не совпадающей с клетками, занятыми змейкой) возникает «пища».
//При запуске игрового процесса(по специальной команде или автоматически при старте игры) 
//змейка начинает автоматическое движение влево с некоторой заданной скоростью.
//Движение заключается в том, что за каждый такт голова змейки перемещается на одну клетку в текущем направлении движения, 
//а клетка, в которой располагался хвост, становится пустой.
//Игрок может сменить направление движения змейки с помощью клавиш - «стрелок»(вверх, вниз, влево, вправо).
//Если на текущем такте движения голова змейки должна будет занять клетку стены или клетку, 
//которая уже занята любой из клеток ее тела, игра прекращается и считается проигранной.
//Задача игрока вырастить змейку до заданного при старте игрового процесса размера.
//Змейка вырастает в длину на одну клетку(с хвоста) при каждом поглощении пищи, т.е. в тот момент, 
//когда ее голова на очередном такте движения занимает клетку, в которой расположена пища.
//На этом же такте в произвольном месте игрового поля(не совпадающей с клетками, занятыми змейкой) снова появляется пища.
//Если змейка выросла до заданной при старте игрового процесса длины, игра считается выигранной.

//Ряд идей для реализации.
//1. Использовать считывание клавиш для меню, как в прошлой лабораторной. +
//2. Предусмотреть несколько размеров поля игры (3 штуки). +
//3. Предусмотреть несколько видов сложности (скорости с которой ползает змейка, 3 штуки). +
//4. В меню будет: начать игру, показать правила, посмотреть результаты рейтинги (запись в файл и считывание из файла), выйти из программы,
//выбрать размеры поля, выбрать сложность игры (скорость змейки). - (не все, что хотел сделал)
//5. Сделать логотип игры (нарисовать макет в консоле) и сделать как в прошлой лабе. +
//6. Использовать модульное программирование, всё-таки да, нужно это сделать, тема полезная +
//7. Сделать бонусные яблочки, которые дают три очка к счёту. +
//8. Сделать бонусные яблочки на время (сложно ли это будет)? - (не сделал)
//9. Счёт и Имя игрока показываться должны ниже. 
//10. Предоставить пользователю выбор цвета головы змейки из имеющихся (синий, зелёный, фиолетовый, голубой, коричневый). - (не сделал, сделал иначе)
//11. Использовать исключения. - (всё-таки решил без них) 

//Класс Snake.
//Структура для сохранения результатов.
//Класс Поле.
//Класс Игра.

#include <iostream>
#include <conio.h>

#include "MyDisplay.h"
#include "MyGame.h"

using namespace std;

int main()
{
	setlocale(LC_ALL, "Rus");
    MyDisplay screen;
    string name;
    screen.ClsConsole();
    MyGame game(screen, 80, 24, 150);
    cout << "Введите ваш никнайм: ";
    cin >> name;
    screen.ClsConsole();
    game.TakeNickName(name);
    screen.HideCursor();
    game.LogoGame();
    screen.ShowCursor();
    game.MainMenu();
	return 0;
}
