#pragma once
#include "Cinema.h"
#include <vector>
#include <iostream>
#include <string>
#define MORNINGHOURS 12
#define EVENINGHOURS 18
#define MORNINGPRICE 0.75
#define EVENINGPRICE 1.5


using namespace std;
/*Разработать классы Билетная касса и Кинотеатр.
Класс Билетная касса должен имитировать работу кассы по продаже билетов на киносеансы в многозальном кинотеатре. Считать, что продажа билетов проводится 
на сеансы в пределах трех дней от текущей даты.
Каждый сеанс описывается датой, временем начала сеанса, названием фильма, номером зала, стоимостью билета в зависимости от зоны (VIP и обычная).
Для упрощения считать, что покупатель указывает тип зоны
и требуемое число билетов, а места выделяются кассой автоматически (при наличии свободных).
Зрительные места в каждом зале описываются номером ряда и номером в ряду. Для упрощения считать, что число мест
во всех рядах в одном зале одинаково. Продажа билетов на сеанс прекращается через 10 минут после начала сеанса.

Информация о всех сеансах на ближайшие 30 дней проката хранится в классе Кинотеатр. Для каждого зала установлена базовая стоимость билетов
(на дневные сеансы – от 12.00 до 18.00).
Стоимость билетов на утренние сеансы (до 12.00) составляет 75% от базовой, стоимость билетов на вечерние сеансы (после 18.00) – 150% от базовой. 
Информация о зрительных местах (свободно/занято) в каждом зале на каждом сеансе также хранится в классе Кинотеатр.

Класс Билетная касса должен предоставлять следующие операции:
1) принять данные покупателя: дату, время сеанса, название фильма, номер зала, тип зоны, число мест
2) проверить наличие требуемого количества свободных мест в требуемой зоне,
3) зарезервировать требуемое количество мест,
4) рассчитать общую стоимость билетов, 
5) отменить заказ билетов
6) сформировать билеты (каждый билет включает: дату, время сеанса, название фильма, номер зала, номер ряда, номер места в ряду).
Класс Кинотеатр должен использоваться для поддержки работы класса Билетная касса и может быть разработан в минимально-необходимом варианте. 
*/

struct Ticket
{
	Date dateSession;
	Time timeEvent;
	string nameFilm = "unknown";
	int hallNumber = 0;
	int rowNumber = 0;
	int seat = 0;
};

std::ostream& operator << (std::ostream& out, const Ticket& _ticket);

struct DataClient
{
	Date date = { 0 , 0 };
	Session neededSession;
	int hallNumber = 0;
	bool isVip = false;
	int countSeats = 0;
};


class TicketOffice
{
private:
	Cinema* cinema;
	DataClient dataFromClient;
	bool isInitilize = false; //true - если полученые данные покупателя
	vector<int> historySeats; //история размещения мест в последней транзакции 
	int GetPrice(int hall, int _countSeats, bool _isVip); 
public:
	TicketOffice(Cinema* otherCinema)
	{
		cinema = otherCinema;
	}
	TicketOffice()
	{
		cinema = nullptr;
	}

	//соединение кассы с нужным кинотеатром
	void SetCinema(Cinema* otherCinema); 
	//забирает данные клиента
	void SetDataClient(Date _date, Time _timeSession, string _nameFilm, int _hallNumber, bool _isVip, int _countSeats); 
	//проверяет доступность данного количества мест в данной зоне 
	bool CheckAvailability();  
	//резервирует места 
	void Reserve(Date currnetDate, Time currentTime); 
	//итоговая цена билетов 
	int GetTotalPrice(); 
	//отмена билетов 
	void CancellationOrder(); 
	//получение билетов 
	vector<Ticket> GetTickets(); 
	//проверяет, получены ли данные клиента 
	void CheckInitilize(); 
	// проверка на опоздание 
	void CheckGetLate(Date currentDate, Time currentTime); 
};

